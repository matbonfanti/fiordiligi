!***************************************************************************************
!*                              MODULE PrintTraj
!***************************************************************************************
!
!>  \brief         Plot of a nuclear trajectory in XYZ format
!>  \details      ...................
!>                \arg  .........
!
!***************************************************************************************
!
!>  \author        Matteo Bonfanti
!>  \version       1.0
!>  \date          March 2012
!>
!***************************************************************************************
!
!>  \par 
!>  \arg 
!
!***************************************************************************************
!
!>  \todo 
!
!***************************************************************************************
MODULE PrintTraj
   USE ErrorTrap
   USE MyConsts

   IMPLICIT NONE

   PRIVATE

   !> Trajectory data type
   TYPE :: TrajOutput
      PRIVATE
      LOGICAL           :: IsOpen = .FALSE.     !< Actual status of the trajectory output
      CHARACTER(len=30) :: FileName             !< Name of the output file 
      INTEGER           :: NrOfAtoms            !< Nr of atoms in the trajectory
      INTEGER           :: Counter = 0          !< Counter of the snapshots being written
      INTEGER           :: Unit                 !< The unit to which it is being written
      CHARACTER(len=3), DIMENSION(:), POINTER  :: AtomLabels  !< Labels of the atoms 
   END TYPE TrajOutput



   
!********************************************************************************************************
   CONTAINS
!********************************************************************************************************


! !*******************************************************************************
! ! WriteTrajectoryXYZ
! !*******************************************************************************
! !>  Given an array containing one trajectory over time, print it
! !>  to file. 
! !> 
! !> @param   CoordinatesVsTime  Array with trajectory (size: 7 x N time steps).
! !> @param   FileName           Output file name.
! !> @param   LatticeConst       Lattice constant of the graphite slab. 
! !*******************************************************************************
!    SUBROUTINE WriteTrajectoryXYZ( CoordinatesVsTime, FileName, LatticeConst )
!       IMPLICIT NONE
! 
!          REAL, DIMENSION( :,: ), INTENT(IN) :: CoordinatesVsTime
!          CHARACTER(*), INTENT(IN)           :: FileName
!          REAL, INTENT(IN)                   :: LatticeConst
! 
!          INTEGER :: NrTimeStep, UnitNr, i
!          REAL    :: A1_x, A1_y, A2_x, A2_y
! 
!          ! check and store array dimensions
!          NrTimeStep = size( CoordinatesVsTime, 2 )
!          CALL ERROR( size( CoordinatesVsTime, 1 ) /= min(16,3+nevo) , " WriteTrajectoryXYZ: Invalid array dimension "  )
! 
!          ! Open input file in a free output unit
!          UnitNr =  LookForFreeUnit()
!          OPEN( FILE = trim(adjustl(FileName)), UNIT=UnitNr )
!    
!          A1_x = LatticeConst
!          A1_y = 0.0 
!          A2_x = LatticeConst/2.0
!          A2_y = sqrt(3.)*LatticeConst/2.0
! 
!          ! write snapshot to output file
!          DO i = 1, NrTimeStep
!             WRITE( UnitNr, * ) " 14 "
!             WRITE( UnitNr, * ) " Step nr ",i," of the trajectory "
!             WRITE( UnitNr, "(A,3F15.6)" ) " H ", CoordinatesVsTime(1,i), CoordinatesVsTime(2,i)     , CoordinatesVsTime(3,i)
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", 0.0                   , 0.0                        , CoordinatesVsTime(4,i) !C1
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", 0.0                   , LatticeConst/sqrt(3.)      , CoordinatesVsTime(5,i) !C2
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", - LatticeConst/2.0    , -LatticeConst/(2*sqrt(3.)) , CoordinatesVsTime(6,i) !C3
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", LatticeConst/2.0      , -LatticeConst/(2*sqrt(3.)) , CoordinatesVsTime(7,i) !C4
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", -A1_x+A2_x            , -A1_y+A2_y                 , CoordinatesVsTime(8,i) !C5
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", +A2_x                 , +A2_y                      , CoordinatesVsTime(9,i) !C6
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", -A1_x                 , -A1_y                      , CoordinatesVsTime(10,i) !C7
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", +A1_x                 , +A1_y                      , CoordinatesVsTime(11,i) !C8
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", -A2_x                 , -A2_y                      , CoordinatesVsTime(12,i) !C9
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", +A1_x-A2_x            , +A1_y-A2_y                 , CoordinatesVsTime(13,i) !C10
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", -A1_x                 , LatticeConst/sqrt(3.)-A1_y , CoordinatesVsTime(14,i) !C11
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", +A1_x                 , LatticeConst/sqrt(3.)+A1_y , CoordinatesVsTime(15,i) !C12
!             WRITE( UnitNr, "(A,3F15.6)" ) " C ", 0.0+A1_x-2*A2_x , LatticeConst/sqrt(3.)+A1_y-2*A2_y, CoordinatesVsTime(16,i) !C13
! 
! 
!          END DO
! 
!          ! close input file
!          CLOSE( UnitNr )
!    
!    END SUBROUTINE WriteTrajectoryXYZ


!*******************************************************************************
!          Traj_NewTrajectory 
!*******************************************************************************
!> Initialize a trajectory file.
!> In detail, the subroutine initialize the data and open the output
!> unit to print the trajectory 
!>
!> @param TrajData           Trajectory data type
!> @param CollectionName     Name of the output file
!> @param CollectionSize     Number of atoms for each snapshot
!*******************************************************************************
   SUBROUTINE Traj_NewTrajectory ( TrajData, FileName, AtomsLabels )
      IMPLICIT NONE
      TYPE(TrajOutput), INTENT(inout)            :: TrajData
      CHARACTER(len=*), INTENT(in)               :: FileName
      CHARACTER(len=*), DIMENSION(:), INTENT(in) :: AtomsLabels
      INTEGER :: i

      ! Check if current data is already being written
      CALL ERROR( TrajData%IsOpen, "Traj_NewTrajectory: TrajData already begin written" )

      ! Store file name and atom number
      TrajData%FileName = TRIM(ADJUSTL( FileName ))
      TrajData%NrOfAtoms = size(AtomsLabels)

      ! Store atomic labels
      ALLOCATE( TrajData%AtomLabels(TrajData%NrOfAtoms) )
      DO i=1, TrajData%NrOfAtoms
         TrajData%AtomLabels(i) = TRIM(ADJUSTL(AtomsLabels(i)))
      END DO

      ! Open output unit
      TrajData%Unit = LookForFreeUnit()
      OPEN( FILE=TRIM(ADJUSTL(TrajData%FileName)), UNIT=TrajData%Unit )

      ! Initialize snapshot counter
      TrajData%Counter = 0

      ! Set actual status 
      TrajData%IsOpen = .TRUE.
      
   END SUBROUTINE Traj_NewTrajectory


!*******************************************************************************
!          Traj_EndTrajectory 
!*******************************************************************************
!> Finalize a trajectory file.
!>
!> @param TrajData           Trajectory data type
!*******************************************************************************
   SUBROUTINE Traj_EndTrajectory ( TrajData, FileName, NrOfAtoms )
      IMPLICIT NONE
      TYPE(TrajOutput), INTENT(inout)   :: TrajData
      CHARACTER(len=*), INTENT(in)      :: FileName
      INTEGER, INTENT(in)               :: NrOfAtoms
   
      ! Check if current data is already being written
      CALL WARN( .NOT. TrajData%IsOpen, "Traj_EndTrajectory: TrajData is not open" )

      ! Close output unit
      CLOSE( UNIT=TrajData%Unit )

      ! Deallocate memory
      DEALLOCATE( TrajData%AtomLabels )

      ! Set actual status 
      TrajData%IsOpen = .FALSE.
      
   END SUBROUTINE Traj_EndTrajectory


!*******************************************************************************
!          Traj_WriteSnapshot
!*******************************************************************************
!> Initialize a new VTR file and set the rectilinear mesh.
!>
!> @param VTKType            VTK collection data type
!*******************************************************************************
   SUBROUTINE Traj_WriteSnapshot( TrajData, Coordinates )
      IMPLICIT NONE
         TYPE(TrajOutput), INTENT(inout)   :: TrajData
         REAL, DIMENSION(:,:), INTENT(in)  :: Coordinates

         INTEGER :: i

         ! check and store array dimensions
         CALL ERROR( size( Coordinates, 1 ) /= TrajData%NrOfAtoms, "Traj_WriteSnapshot: invalid number of atoms ")
         CALL ERROR( size( Coordinates, 2 ) /= 3 , " Traj_WriteSnapshot: Invalid nr of dimensions "  )

         ! check that the trajdata is open
         CALL ERROR( .NOT. TrajData%IsOpen, "Traj_WriteSnapshot: TrajData is not open" )

         ! increment snapshot counter
         TrajData%Counter = TrajData%Counter + 1

         ! print snapshot
         WRITE( TrajData%Unit, "(I4)" ) TrajData%NrOfAtoms
         WRITE( TrajData%Unit, * ) " Step nr ",TrajData%Counter," of the trajectory "
         DO i = 1, TrajData%NrOfAtoms 
           WRITE( TrajData%Unit, "(A1,A3,A1,3F15.6)" ) " ",TrajData%AtomLabels(i)," ",Coordinates(1:3,i)
         END DO
   
   END SUBROUTINE Traj_WriteSnapshot


   
END MODULE PrintTraj
